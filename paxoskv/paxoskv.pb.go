// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.10.0
// source: paxoskv.proto

package paxoskv

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// multi-paxos prepare request.
// It prepares for all paxos instance with log index >= LSN
type PrepareReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// from what paxos instance it runs on
	FromLSN int64 `protobuf:"varint,1,opt,name=FromLSN,proto3" json:"FromLSN,omitempty"`
	// Bal is the ballot number of a Proposer
	Bal *BallotNum `protobuf:"bytes,2,opt,name=Bal,proto3" json:"Bal,omitempty"`
}

func (x *PrepareReq) Reset() {
	*x = PrepareReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paxoskv_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareReq) ProtoMessage() {}

func (x *PrepareReq) ProtoReflect() protoreflect.Message {
	mi := &file_paxoskv_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareReq.ProtoReflect.Descriptor instead.
func (*PrepareReq) Descriptor() ([]byte, []int) {
	return file_paxoskv_proto_rawDescGZIP(), []int{0}
}

func (x *PrepareReq) GetFromLSN() int64 {
	if x != nil {
		return x.FromLSN
	}
	return 0
}

func (x *PrepareReq) GetBal() *BallotNum {
	if x != nil {
		return x.Bal
	}
	return nil
}

// PrepareReply is the reply for multi-paxos prepare.
// It returns a single LastBal since in a multi-paxos, all paxos instances
// share the same LastBal and acceptor states.
type PrepareReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the last ballot number the instance knows of.
	LastBal   *BallotNum  `protobuf:"bytes,1,opt,name=LastBal,proto3" json:"LastBal,omitempty"`
	Acceptors []*Acceptor `protobuf:"bytes,2,rep,name=Acceptors,proto3" json:"Acceptors,omitempty"`
}

func (x *PrepareReply) Reset() {
	*x = PrepareReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paxoskv_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareReply) ProtoMessage() {}

func (x *PrepareReply) ProtoReflect() protoreflect.Message {
	mi := &file_paxoskv_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareReply.ProtoReflect.Descriptor instead.
func (*PrepareReply) Descriptor() ([]byte, []int) {
	return file_paxoskv_proto_rawDescGZIP(), []int{1}
}

func (x *PrepareReply) GetLastBal() *BallotNum {
	if x != nil {
		return x.LastBal
	}
	return nil
}

func (x *PrepareReply) GetAcceptors() []*Acceptor {
	if x != nil {
		return x.Acceptors
	}
	return nil
}

type AcceptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bal is the ballot number of a Proposer
	Bal *BallotNum `protobuf:"bytes,1,opt,name=Bal,proto3" json:"Bal,omitempty"`
	// Multiple Cmd to accept
	// The key is LSN.
	Cmds map[int64]*Cmd `protobuf:"bytes,2,rep,name=Cmds,proto3" json:"Cmds,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AcceptReq) Reset() {
	*x = AcceptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paxoskv_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptReq) ProtoMessage() {}

func (x *AcceptReq) ProtoReflect() protoreflect.Message {
	mi := &file_paxoskv_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptReq.ProtoReflect.Descriptor instead.
func (*AcceptReq) Descriptor() ([]byte, []int) {
	return file_paxoskv_proto_rawDescGZIP(), []int{2}
}

func (x *AcceptReq) GetBal() *BallotNum {
	if x != nil {
		return x.Bal
	}
	return nil
}

func (x *AcceptReq) GetCmds() map[int64]*Cmd {
	if x != nil {
		return x.Cmds
	}
	return nil
}

type AcceptReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastBal *BallotNum `protobuf:"bytes,1,opt,name=LastBal,proto3" json:"LastBal,omitempty"`
}

func (x *AcceptReply) Reset() {
	*x = AcceptReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paxoskv_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptReply) ProtoMessage() {}

func (x *AcceptReply) ProtoReflect() protoreflect.Message {
	mi := &file_paxoskv_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptReply.ProtoReflect.Descriptor instead.
func (*AcceptReply) Descriptor() ([]byte, []int) {
	return file_paxoskv_proto_rawDescGZIP(), []int{3}
}

func (x *AcceptReply) GetLastBal() *BallotNum {
	if x != nil {
		return x.LastBal
	}
	return nil
}

type CommitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmds map[int64]*Cmd `protobuf:"bytes,1,rep,name=Cmds,proto3" json:"Cmds,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CommitReq) Reset() {
	*x = CommitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paxoskv_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitReq) ProtoMessage() {}

func (x *CommitReq) ProtoReflect() protoreflect.Message {
	mi := &file_paxoskv_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitReq.ProtoReflect.Descriptor instead.
func (*CommitReq) Descriptor() ([]byte, []int) {
	return file_paxoskv_proto_rawDescGZIP(), []int{4}
}

func (x *CommitReq) GetCmds() map[int64]*Cmd {
	if x != nil {
		return x.Cmds
	}
	return nil
}

type CommitReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommitReply) Reset() {
	*x = CommitReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paxoskv_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitReply) ProtoMessage() {}

func (x *CommitReply) ProtoReflect() protoreflect.Message {
	mi := &file_paxoskv_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitReply.ProtoReflect.Descriptor instead.
func (*CommitReply) Descriptor() ([]byte, []int) {
	return file_paxoskv_proto_rawDescGZIP(), []int{5}
}

// BallotNum is the ballot number in paxos. It consists of a monotonically
// incremental number and a universally unique ProposerId.
type BallotNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	N  int64 `protobuf:"varint,1,opt,name=N,proto3" json:"N,omitempty"`
	Id int64 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *BallotNum) Reset() {
	*x = BallotNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paxoskv_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BallotNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BallotNum) ProtoMessage() {}

func (x *BallotNum) ProtoReflect() protoreflect.Message {
	mi := &file_paxoskv_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BallotNum.ProtoReflect.Descriptor instead.
func (*BallotNum) Descriptor() ([]byte, []int) {
	return file_paxoskv_proto_rawDescGZIP(), []int{6}
}

func (x *BallotNum) GetN() int64 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *BallotNum) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Cmd is the value in this paxos impl, which is a command to set a key-value
// record.
// In this demo it is just string key and a int64 value.
type Cmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LSN: log-sequence-number
	// LSN is used to identify a paxos instance.
	LSN int64 `protobuf:"varint,1,opt,name=LSN,proto3" json:"LSN,omitempty"`
	// Author and LSN together identifies a Cmd,
	// since the BallotNum of an established leader is globally unique thus it
	// identifies a leader.
	//
	// Different proposers may propose different Cmd for a same log entry.
	// Paxos will finally choose one of them.
	//
	// Two proposers may propose a Cmd with the same Key and Vi64, in which case
	// these two must be distinguishable, otherwise a Write operation may be
	// lost.
	Author *BallotNum `protobuf:"bytes,2,opt,name=Author,proto3" json:"Author,omitempty"`
	Key    string     `protobuf:"bytes,3,opt,name=Key,proto3" json:"Key,omitempty"`
	Vi64   int64      `protobuf:"varint,4,opt,name=Vi64,proto3" json:"Vi64,omitempty"`
}

func (x *Cmd) Reset() {
	*x = Cmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paxoskv_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cmd) ProtoMessage() {}

func (x *Cmd) ProtoReflect() protoreflect.Message {
	mi := &file_paxoskv_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cmd.ProtoReflect.Descriptor instead.
func (*Cmd) Descriptor() ([]byte, []int) {
	return file_paxoskv_proto_rawDescGZIP(), []int{7}
}

func (x *Cmd) GetLSN() int64 {
	if x != nil {
		return x.LSN
	}
	return 0
}

func (x *Cmd) GetAuthor() *BallotNum {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Cmd) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Cmd) GetVi64() int64 {
	if x != nil {
		return x.Vi64
	}
	return 0
}

// Acceptor is the state of an Acceptor and is the log entry in a multi
// paxos logs
type Acceptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the value voted by this Acceptor
	Val *Cmd `protobuf:"bytes,3,opt,name=Val,proto3" json:"Val,omitempty"`
	// at which ballot number the Acceptor voted it.
	VBal      *BallotNum `protobuf:"bytes,4,opt,name=VBal,proto3" json:"VBal,omitempty"`
	Committed bool       `protobuf:"varint,5,opt,name=Committed,proto3" json:"Committed,omitempty"`
}

func (x *Acceptor) Reset() {
	*x = Acceptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_paxoskv_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acceptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acceptor) ProtoMessage() {}

func (x *Acceptor) ProtoReflect() protoreflect.Message {
	mi := &file_paxoskv_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acceptor.ProtoReflect.Descriptor instead.
func (*Acceptor) Descriptor() ([]byte, []int) {
	return file_paxoskv_proto_rawDescGZIP(), []int{8}
}

func (x *Acceptor) GetVal() *Cmd {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *Acceptor) GetVBal() *BallotNum {
	if x != nil {
		return x.VBal
	}
	return nil
}

func (x *Acceptor) GetCommitted() bool {
	if x != nil {
		return x.Committed
	}
	return false
}

var File_paxoskv_proto protoreflect.FileDescriptor

var file_paxoskv_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x61, 0x78, 0x6f, 0x73, 0x6b, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x70, 0x61, 0x78, 0x6f, 0x73, 0x6b, 0x76, 0x22, 0x4c, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x53,
	0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x53, 0x4e,
	0x12, 0x24, 0x0a, 0x03, 0x42, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x61, 0x78, 0x6f, 0x73, 0x6b, 0x76, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x4e, 0x75,
	0x6d, 0x52, 0x03, 0x42, 0x61, 0x6c, 0x22, 0x6d, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x07, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x78, 0x6f, 0x73, 0x6b,
	0x76, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x52, 0x07, 0x4c, 0x61, 0x73,
	0x74, 0x42, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x78, 0x6f, 0x73, 0x6b,
	0x76, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x03, 0x42, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x61, 0x78, 0x6f, 0x73, 0x6b, 0x76, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x6f,
	0x74, 0x4e, 0x75, 0x6d, 0x52, 0x03, 0x42, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x04, 0x43, 0x6d, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x61, 0x78, 0x6f, 0x73, 0x6b,
	0x76, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x43, 0x6d, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x43, 0x6d, 0x64, 0x73, 0x1a, 0x45, 0x0a, 0x09, 0x43,
	0x6d, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x61, 0x78, 0x6f,
	0x73, 0x6b, 0x76, 0x2e, 0x43, 0x6d, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x3b, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x2c, 0x0a, 0x07, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x78, 0x6f, 0x73, 0x6b, 0x76, 0x2e, 0x42, 0x61, 0x6c,
	0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x52, 0x07, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x22,
	0x84, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a,
	0x04, 0x43, 0x6d, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x61,
	0x78, 0x6f, 0x73, 0x6b, 0x76, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x2e,
	0x43, 0x6d, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x43, 0x6d, 0x64, 0x73, 0x1a,
	0x45, 0x0a, 0x09, 0x43, 0x6d, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x61, 0x78, 0x6f, 0x73, 0x6b, 0x76, 0x2e, 0x43, 0x6d, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x0d, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x29, 0x0a, 0x09, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x4e,
	0x75, 0x6d, 0x12, 0x0c, 0x0a, 0x01, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x4e,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64,
	0x22, 0x69, 0x0a, 0x03, 0x43, 0x6d, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x53, 0x4e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x4c, 0x53, 0x4e, 0x12, 0x2a, 0x0a, 0x06, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x78, 0x6f,
	0x73, 0x6b, 0x76, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x52, 0x06, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x69, 0x36, 0x34, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x56, 0x69, 0x36, 0x34, 0x22, 0x70, 0x0a, 0x08, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x03, 0x56, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x61, 0x78, 0x6f, 0x73, 0x6b, 0x76, 0x2e, 0x43,
	0x6d, 0x64, 0x52, 0x03, 0x56, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x04, 0x56, 0x42, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x78, 0x6f, 0x73, 0x6b, 0x76, 0x2e,
	0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x52, 0x04, 0x56, 0x42, 0x61, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x32, 0xf8, 0x01,
	0x0a, 0x07, 0x50, 0x61, 0x78, 0x6f, 0x73, 0x4b, 0x56, 0x12, 0x37, 0x0a, 0x07, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x61, 0x78, 0x6f, 0x73, 0x6b, 0x76, 0x2e, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x61, 0x78, 0x6f,
	0x73, 0x6b, 0x76, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x34, 0x0a, 0x06, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x12, 0x2e, 0x70,
	0x61, 0x78, 0x6f, 0x73, 0x6b, 0x76, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x14, 0x2e, 0x70, 0x61, 0x78, 0x6f, 0x73, 0x6b, 0x76, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x12, 0x12, 0x2e, 0x70, 0x61, 0x78, 0x6f, 0x73, 0x6b, 0x76, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x61, 0x78, 0x6f, 0x73, 0x6b, 0x76,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x23,
	0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x0c, 0x2e, 0x70, 0x61, 0x78, 0x6f, 0x73, 0x6b, 0x76, 0x2e,
	0x43, 0x6d, 0x64, 0x1a, 0x0c, 0x2e, 0x70, 0x61, 0x78, 0x6f, 0x73, 0x6b, 0x76, 0x2e, 0x43, 0x6d,
	0x64, 0x22, 0x00, 0x12, 0x23, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x0c, 0x2e, 0x70, 0x61, 0x78,
	0x6f, 0x73, 0x6b, 0x76, 0x2e, 0x43, 0x6d, 0x64, 0x1a, 0x0c, 0x2e, 0x70, 0x61, 0x78, 0x6f, 0x73,
	0x6b, 0x76, 0x2e, 0x43, 0x6d, 0x64, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_paxoskv_proto_rawDescOnce sync.Once
	file_paxoskv_proto_rawDescData = file_paxoskv_proto_rawDesc
)

func file_paxoskv_proto_rawDescGZIP() []byte {
	file_paxoskv_proto_rawDescOnce.Do(func() {
		file_paxoskv_proto_rawDescData = protoimpl.X.CompressGZIP(file_paxoskv_proto_rawDescData)
	})
	return file_paxoskv_proto_rawDescData
}

var file_paxoskv_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_paxoskv_proto_goTypes = []interface{}{
	(*PrepareReq)(nil),   // 0: paxoskv.PrepareReq
	(*PrepareReply)(nil), // 1: paxoskv.PrepareReply
	(*AcceptReq)(nil),    // 2: paxoskv.AcceptReq
	(*AcceptReply)(nil),  // 3: paxoskv.AcceptReply
	(*CommitReq)(nil),    // 4: paxoskv.CommitReq
	(*CommitReply)(nil),  // 5: paxoskv.CommitReply
	(*BallotNum)(nil),    // 6: paxoskv.BallotNum
	(*Cmd)(nil),          // 7: paxoskv.Cmd
	(*Acceptor)(nil),     // 8: paxoskv.Acceptor
	nil,                  // 9: paxoskv.AcceptReq.CmdsEntry
	nil,                  // 10: paxoskv.CommitReq.CmdsEntry
}
var file_paxoskv_proto_depIdxs = []int32{
	6,  // 0: paxoskv.PrepareReq.Bal:type_name -> paxoskv.BallotNum
	6,  // 1: paxoskv.PrepareReply.LastBal:type_name -> paxoskv.BallotNum
	8,  // 2: paxoskv.PrepareReply.Acceptors:type_name -> paxoskv.Acceptor
	6,  // 3: paxoskv.AcceptReq.Bal:type_name -> paxoskv.BallotNum
	9,  // 4: paxoskv.AcceptReq.Cmds:type_name -> paxoskv.AcceptReq.CmdsEntry
	6,  // 5: paxoskv.AcceptReply.LastBal:type_name -> paxoskv.BallotNum
	10, // 6: paxoskv.CommitReq.Cmds:type_name -> paxoskv.CommitReq.CmdsEntry
	6,  // 7: paxoskv.Cmd.Author:type_name -> paxoskv.BallotNum
	7,  // 8: paxoskv.Acceptor.Val:type_name -> paxoskv.Cmd
	6,  // 9: paxoskv.Acceptor.VBal:type_name -> paxoskv.BallotNum
	7,  // 10: paxoskv.AcceptReq.CmdsEntry.value:type_name -> paxoskv.Cmd
	7,  // 11: paxoskv.CommitReq.CmdsEntry.value:type_name -> paxoskv.Cmd
	0,  // 12: paxoskv.PaxosKV.Prepare:input_type -> paxoskv.PrepareReq
	2,  // 13: paxoskv.PaxosKV.Accept:input_type -> paxoskv.AcceptReq
	4,  // 14: paxoskv.PaxosKV.Commit:input_type -> paxoskv.CommitReq
	7,  // 15: paxoskv.PaxosKV.Set:input_type -> paxoskv.Cmd
	7,  // 16: paxoskv.PaxosKV.Get:input_type -> paxoskv.Cmd
	1,  // 17: paxoskv.PaxosKV.Prepare:output_type -> paxoskv.PrepareReply
	3,  // 18: paxoskv.PaxosKV.Accept:output_type -> paxoskv.AcceptReply
	5,  // 19: paxoskv.PaxosKV.Commit:output_type -> paxoskv.CommitReply
	7,  // 20: paxoskv.PaxosKV.Set:output_type -> paxoskv.Cmd
	7,  // 21: paxoskv.PaxosKV.Get:output_type -> paxoskv.Cmd
	17, // [17:22] is the sub-list for method output_type
	12, // [12:17] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_paxoskv_proto_init() }
func file_paxoskv_proto_init() {
	if File_paxoskv_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_paxoskv_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_paxoskv_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_paxoskv_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_paxoskv_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_paxoskv_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_paxoskv_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_paxoskv_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BallotNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_paxoskv_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_paxoskv_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acceptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_paxoskv_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_paxoskv_proto_goTypes,
		DependencyIndexes: file_paxoskv_proto_depIdxs,
		MessageInfos:      file_paxoskv_proto_msgTypes,
	}.Build()
	File_paxoskv_proto = out.File
	file_paxoskv_proto_rawDesc = nil
	file_paxoskv_proto_goTypes = nil
	file_paxoskv_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PaxosKVClient is the client API for PaxosKV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PaxosKVClient interface {
	Prepare(ctx context.Context, in *PrepareReq, opts ...grpc.CallOption) (*PrepareReply, error)
	Accept(ctx context.Context, in *AcceptReq, opts ...grpc.CallOption) (*AcceptReply, error)
	Commit(ctx context.Context, in *CommitReq, opts ...grpc.CallOption) (*CommitReply, error)
	Set(ctx context.Context, in *Cmd, opts ...grpc.CallOption) (*Cmd, error)
	Get(ctx context.Context, in *Cmd, opts ...grpc.CallOption) (*Cmd, error)
}

type paxosKVClient struct {
	cc grpc.ClientConnInterface
}

func NewPaxosKVClient(cc grpc.ClientConnInterface) PaxosKVClient {
	return &paxosKVClient{cc}
}

func (c *paxosKVClient) Prepare(ctx context.Context, in *PrepareReq, opts ...grpc.CallOption) (*PrepareReply, error) {
	out := new(PrepareReply)
	err := c.cc.Invoke(ctx, "/paxoskv.PaxosKV/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxosKVClient) Accept(ctx context.Context, in *AcceptReq, opts ...grpc.CallOption) (*AcceptReply, error) {
	out := new(AcceptReply)
	err := c.cc.Invoke(ctx, "/paxoskv.PaxosKV/Accept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxosKVClient) Commit(ctx context.Context, in *CommitReq, opts ...grpc.CallOption) (*CommitReply, error) {
	out := new(CommitReply)
	err := c.cc.Invoke(ctx, "/paxoskv.PaxosKV/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxosKVClient) Set(ctx context.Context, in *Cmd, opts ...grpc.CallOption) (*Cmd, error) {
	out := new(Cmd)
	err := c.cc.Invoke(ctx, "/paxoskv.PaxosKV/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxosKVClient) Get(ctx context.Context, in *Cmd, opts ...grpc.CallOption) (*Cmd, error) {
	out := new(Cmd)
	err := c.cc.Invoke(ctx, "/paxoskv.PaxosKV/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaxosKVServer is the server API for PaxosKV service.
type PaxosKVServer interface {
	Prepare(context.Context, *PrepareReq) (*PrepareReply, error)
	Accept(context.Context, *AcceptReq) (*AcceptReply, error)
	Commit(context.Context, *CommitReq) (*CommitReply, error)
	Set(context.Context, *Cmd) (*Cmd, error)
	Get(context.Context, *Cmd) (*Cmd, error)
}

// UnimplementedPaxosKVServer can be embedded to have forward compatible implementations.
type UnimplementedPaxosKVServer struct {
}

func (*UnimplementedPaxosKVServer) Prepare(context.Context, *PrepareReq) (*PrepareReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (*UnimplementedPaxosKVServer) Accept(context.Context, *AcceptReq) (*AcceptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accept not implemented")
}
func (*UnimplementedPaxosKVServer) Commit(context.Context, *CommitReq) (*CommitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (*UnimplementedPaxosKVServer) Set(context.Context, *Cmd) (*Cmd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedPaxosKVServer) Get(context.Context, *Cmd) (*Cmd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterPaxosKVServer(s *grpc.Server, srv PaxosKVServer) {
	s.RegisterService(&_PaxosKV_serviceDesc, srv)
}

func _PaxosKV_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaxosKVServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paxoskv.PaxosKV/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaxosKVServer).Prepare(ctx, req.(*PrepareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaxosKV_Accept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaxosKVServer).Accept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paxoskv.PaxosKV/Accept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaxosKVServer).Accept(ctx, req.(*AcceptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaxosKV_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaxosKVServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paxoskv.PaxosKV/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaxosKVServer).Commit(ctx, req.(*CommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaxosKV_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaxosKVServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paxoskv.PaxosKV/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaxosKVServer).Set(ctx, req.(*Cmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaxosKV_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaxosKVServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paxoskv.PaxosKV/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaxosKVServer).Get(ctx, req.(*Cmd))
	}
	return interceptor(ctx, in, info, handler)
}

var _PaxosKV_serviceDesc = grpc.ServiceDesc{
	ServiceName: "paxoskv.PaxosKV",
	HandlerType: (*PaxosKVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _PaxosKV_Prepare_Handler,
		},
		{
			MethodName: "Accept",
			Handler:    _PaxosKV_Accept_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _PaxosKV_Commit_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _PaxosKV_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PaxosKV_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "paxoskv.proto",
}
